Submit
You have recently learned about how forms are sent to web servers and the difference between Get and Post. In this reading, you will build on this knowledge by learning about Submit. 

Action and method 

Form submissions are an essential part of the world wide web. Nearly every website uses forms, from buying items online to ordering food for delivery. When you click the login button on a website, it sends your username and password to a web server to log you into your account. 

As you know by now, you add a form to your web page using the form tag. 

12
<form> 
</form> 

But how the form is submitted is determined by two essential attributes: action and method. 

The action attribute specifies to which web address the form must be sent. This is address is location of server-side code that will process the request.

12
<form action="/login"> 
</form> 

It is important to note that action can be a full URL address such as https://meta.com, an absolute path such as /login, or a relative path such as login. 

The absolute path, which starts with a forward slash, will use the base address of the current website, such as https://meta.com and combine it with the absolute path. For example, if /login is the absolute path, the form will be submitted to https://meta.com/login. If the address is https://meta.com/company-info/ and /login is the absolute path, the submission address will still be https://meta.com/login.

Similarly, a relative path will combine the current web address with a relative path. For example, if the web browser is currently on the web page https://meta.com/company-info/, and the relative path is set to login, the form will be submitted to https://meta.com/company-info/login. 

The method attribute specifies which HTTP method is used to submit the form; GET or POST. 

12
<form method="get"> 
</form> 

12
<form method="post"> 
</form> 

The form will default to the HTTP GET method when the method attribute is not provided. 

As you may already know, when the form is submitted using the HTTP GET method, the data in the form's fields are encoded in the URL. And when the form is submitted using the HTTP POST method, the data is sent as part of the HTTP request body. 

When the web server receives the request, it processes the data and sends back an HTTP response. The response indicates the result of the submission, which can be successful or fail due to invalid or incorrect data. 

However, as a front-end developer, it is essential to know that forms are not the only way to submit data to the web server. As you learn more about JavaScript and front-end libraries, you’ll discover that developers often submit HTTP requests directly via code and send data as part of the HTTP request body in a text format called JavaScript Object Notation, or JSON. But that is a topic for another course. 

For now, practice building HTML forms and submitting data to the web server using the different attributes available. 


Glossary: HTML form elements
The <form> element in HTML is an important and useful element. The following sheet provides an overview of the <form> constituent elements and their common attributes with simple examples for quick reference.

<input> 
It is used to create interactive controls, for example, buttons and various types of text fields and so on, to accept input or data from the user. The key attribute of this element is type. Some common values for the type include: button, checkbox, date, email, number, password, submit, text, and url. These values dictate the appearance of the element. For example, this code:

123456789101112
<form action="my_action_page"> 

  <label for="uname">Username:</label> 
  <br> 
  <input type="text" id="uname" name="username"> 
  <br> 
  <label for="pwd">Password:</label> 
  <br> 
  <input type="password" id="pwd" name="pwd"> 
  <br><br> 

Results in the following output:


Two input types, text and password, as it displays in the browser.

 Note how the type password hides the user input. 

<label>
Defines a label for an element. It has an attribute "for", the value of which should be equal to the id attribute of the element it is associated with. Note how in the example above, the <label> is associated with the <input> using its id value. 


<select>
Defines a drop-down list of options presented to the user. It has a couple of attributes: 

Form, the id of the form in which the drop-down appears 

Name specifies the name of the control 

Multiple Boolean attribute, when specified, indicates if a user can select multiple options out of the list 

Required indicates if the user is required to select an option before submitting a form 

Size mentions the number of visible options in a drop-down list 

The options in a drop-down list are defined using the <option> element inside <select>. Note the example in the <option> description below. 


<textarea>

Defines a multi-line input field, typically to allow the user to input longer textual data. The common attributes for this element include: 

cols defines the width of the text area, the default value is 20 

form the form element the text area is associated with 

maxlength when specified, limits the maximum number of characters that can be entered in the text area 

minlength the minimum number of characters that the user should enter 

readonly once set, the user cannot modify the contents 

rows defines the number of visible text lines for the text area 

The following line of code defines a text area of 10 visible lines and nearly 30 characters wide where the user can input a maximum of 200 characters: 

32
<textarea name="response" rows="10" cols="30" maxlength=”200”> 

</textarea> 
<button>
Defines a clickable button. The onclick attribute defines the behavior when the button is clicked by the user. For example, in the code below, an alert message is shown to the user. 


12
<button type="button" onclick="alert('You just clicked!')">Click Me! 
</button> 
<fieldset> 

Used to group related input elements in a form. For instance, elements related to the user’s personal information and educational qualification can be grouped separately in two field sets. 

<legend> 

Defines a caption for the <fieldset> element. For example: 


123456789101112131415
<fieldset> 
  <legend>Personal Info</legend> 
  <label for="fname">First name:</label><br> 
  <input type="text" id="fname" name="fname" value="John"><br> 
  <label for="lname">Last name:</label><br> 
  <input type="text" id="lname" name="lname" value="Doe"><br> 
</fieldset> 

<fieldset> 
  <legend>Qualificaiton</legend> 

<datalist>


Specifies a list of pre-defined options for an input element. It differs from <select> since the user can still provide textual or numeric input other than the listed options. 
 

12
<form action="/my_action_page"> 
  <label for="flowers">Favourite flower:</label><br> 
  <input list="flowers" name="flowers"> 
  <datalist id="flowers"> 
    <option value="Rose"> 
    <option value="Lily"> 
    <option value="Tulip"> 
    <option value="Daffodil"> 
    <option value="Orchid"> 
  </datalist> 


Datalist input type with its drop-down list containing the options visible

<output> 

Represents the result of a calculation (typically the output of a script) or the outcome of the user action. 

<option> 

Defines an option for the drop-down list. The following code example demonstrates how a simple list can be defined, with the rendered view below the code block. 


1234567
<label for="course">Choose a course:</label><br> 
<select id="course" name="courselist"> 
  <option value="html">HTML Introduction</option> 
  <option value="css">Styling with CSS</option> 
  <option value="js">JavaScript</option> 
  <option value="react">React Basics</option> 
</select> 

Option input type as with its drop-down list visible

By default, the first item in the drop-down list is selected. To define a pre-selected option, add the selected attribute to the option. 

<optgroup> 

Defines a group of related options in a drop-down list. Its attribute label names the group. 



Images
This lesson will help refresh your knowledge of the <img> tag and how you can use it to embed images in webpages. 

The <img> tag is used to add an image to a web page. The image’s address is specified using the src attribute. For example, if you wanted to embed an image file named photo.png, you can do that with the following HTML. 

<img src="photo.png"> 

You can also specify the width and height of the image using the width and height attributes. For example, if the width of the photo is 640 pixels and the height of the photo is 480 pixels, you can use the following HTML. 

<img src="photo.png" width="640" height="480"> 

It is important to note that you can set the image to a larger or smaller size and the web browser will automatically scale the image. For example, you can update the previous HTML to half the width and height and the image would shrink by 50%. 

<img src="photo.png" width="320" height="240"> 

One useful feature of rendering images in the web browser is that the web browser can automatically keep the correct ratio of width to height. So for example, if you want to scale the image by 50%, you can simply set the width attribute and the web browser will automatically calculate the height. 

<img src="photo.png" width="320"> 

But what happens if the photo doesn’t load? Perhaps the file was accidentally deleted, or you mistyped the file name. Luckily, the web browser has a way to display some text when the image fails to load. This is done using the alt attribute. For example, you can display the text My Profile Photo using the alt attribute in the previous HTML. 

<img src="photo.png" width="320" alt="My Profile Photo"> 

It is important to ensure that screen reader accessibility software can interpret images displayed in the web browser. To support this, the <img> tag is combined with the <figure> and <figcaption> tags to provide a description of the image. The <img> tag is added inside the <figure> tag and the <figcaption> is specified after it. 


1234
<figure> 
   <img src="photo.png" width="320" alt="My Profile Photo"> 
   <figcaption>A photo of myself on a beach in 2015</figcaption> 
</figure>
One last thing to note is that like videos and audio, the web browser only supports specific file types. These file types are: 

.APNG – Animated Portable Network Graphics 

.AVIF – AV1 Image Format 

.GIF – Graphics Interchange Format 

.JPEG / .JPG – Joint Photographic Expert Group image format 

.PNG – Portable Network Graphics 

.SVG – Scalable Vector Graphics 

.WEBP – Web Picture Format 


Images will be important as you build websites and ensuring they are accessible will provide a better user experience for all visitors. 


iFrame sandbox cheat sheet
The <iframe> is the inline frame element that embeds an HTML page into another page.  

Apart from the global attributes, which can be a part of the iframe, major element-specific attributes are listed below. 

allow 
It specifies what features or permissions are available to the frame, for instance, access to the microphone, camera, other APIs and so on. For example: 

allow="fullscreen” the fullscreen mode can be activated 

allow=“geolocation” lets you access the user’s location 

To specify more than one feature, a semicolon-separator should be used between features. For example, the following would allow using the camera and the microphone: 

<iframe src="https://example.com/…" allow="camera; microphone"> </iframe> 

name 
The name for the <iframe>. For example: 

<iframe name = "My Frame" width="400" height="300"></iframe>  

height 
It specifies the height of the frame. The default value is 150, in terms of CSS pixels. 
width 

width
Specifies the width of the frame, in terms of CSS pixels. The default value is 300 pixels.

referrerpolicy 
A referrer is the HTTP header that lets the page know who is loading it. This attribute indicates which referrer information to send when loading the frame resource. The common values are: 

no-referrer The referrer header will not be sent. 

origin The referrer will be limited to the origin of the referring page 

strict-origin The origin of the document is sent as the referrer only when using the same protocol security level (HTTPS to HTTPS) 

sandbox 
To enforce greater security, a sandbox applies extra restrictions to the content in the <iframe>. To lift particular restrictions, an attribute value (permission token) is used. The common permission tokens are listed below: 

allow-downloads Allows the user to download an item 

allow-forms Allows the user to submit forms 

allow-modals The resource can open modal windows 

allow-orientation-lock Lets the resource lock the screen orientation 

allow-popups Allows popups to open 

allow-presentation Allows a presentation session to start 

allow-scripts Lets the resource run scripts without creating popup windows 


Note that when the value of this attribute is empty, all restrictions are applied. To apply more than one permission, use a space-separated list. For example, the following would allow form submission and scripts while keeping other restrictions active: 

12
<iframe src="my_iframe_sandbox.html" sandbox="allow-forms allow-scripts"> 
</iframe> 
src 
The URL of the page to embed in the <iframe>. Using the value about:blank would embed an empty page. 

srcdoc
Let's you specify the inline HTML to embed in the <iframe>. When defined, this attribute would override the src attribute.  

For instance, the following code will display "My inline html" in the frame, instead of loading my_iframe_src.html. 

12
<iframe src="my_iframe_src.html" srcdoc="<p>My inline html</p>" > 
</iframe> 
loading
This attribute let's you specify if the iframe should be loaded immediately when the web page loads (eager) or loaded when iframe is displayed in the browser (lazy). This allows you to defer loading iframe content if it is further down your web page and outside of the display area when the page is initially loaded.

12
<iframe src="my_iframe_src.html" loading="lazy" > 
</iframe> 
title
This attribute let's you add a description to the iframe for accessibility purposes. The value of this attribute should accurately describe the iframe's content.

12
<iframe src="history.html" title="An embedded document about the history of my family" > 
</iframe> 
